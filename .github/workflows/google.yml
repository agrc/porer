name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - dev

concurrency:
  group: "${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ‚¨áÔ∏è Set up code
        uses: actions/checkout@v2

      - name: üêç Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.2"
          cache: pip
          cache-dependency-path: setup.py

      - name: üèó Install conductor
        run: pip install .[tests,cloud-run]

      - name: ü§ê Create secret file
        run: |
          mkdir -p secrets/db
          echo "{\"internalsgid\":{},\"opensgid\":{\"host\":\"opensgid.agrc.utah.gov\",\"database\":\"opensgid\",\"user\":\"agrc\",\"password\":\"agrc\"},\"github_token\":\"\"}" > secrets/db/connections

      - name: üß™ Run pytest
        run: pytest

      - name: üóùÔ∏è Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.6.0
        with:
          create_credentials_file: true
          token_format: access_token
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      - name: üê≥ Setup docker
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set short commit hash
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: üì¶ Build image
        run: |-
          docker build \
            --tag gcr.io/${{ secrets.PROJECT_ID }}/conductor:$SHORT_SHA \
            --tag gcr.io/${{ secrets.PROJECT_ID }}/conductor:latest \
            .

      - name: üì§ Publish image
        run: |-
          docker push --all-tags gcr.io/${{ secrets.PROJECT_ID }}/conductor

      - name: üöÄ Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.8.0
        with:
          service: conductor
          image: gcr.io/${{ secrets.PROJECT_ID }}/conductor
          region: us-central1
          env_vars: |
            PORTER_DEVELOPMENT=1
          secrets: |
            /secrets/db/connection=conductor-connections:latest
            /secrets/sheets/service-account=stewardship-sa:latest
          flags: |
            --service-account=${{secrets.CLOUD_RUN_SERVICE_ACCOUNT_NAME}}
            --vpc-connector=${{ secrets.VPC }}
            --max-instances=10
            --cpu=1000m
            --memory=512Mi
            --timeout=5m

      - name: üï∞Ô∏è Create cloud scheduler
        run: |
          if [ ! "$(gcloud scheduler jobs list | grep conductor)" ]; then
            gcloud scheduler jobs create http conductor \
              --description="Trigger the conductor bot once a week on monday morning" \
              --schedule="0 9 * * 1" \
              --time-zone=America/Denver \
              --uri=$(gcloud run services describe conductor --region us-central1 --format 'value(status.url)')/gcp/schedule \
              --http-method=POST \
              --max-retry-attempts=3 \
              --min-backoff=1m \
              --max-backoff=10m \
              --oidc-service-account-email=cloud-scheduler@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --quiet
          else
            gcloud scheduler jobs update http conductor \
              --description="Trigger the conductor bot once a week on monday morning" \
              --schedule="0 9 * * 1" \
              --time-zone=America/Denver \
              --uri=$(gcloud run services describe conductor --region us-central1 --format 'value(status.url)')/gcp/schedule \
              --http-method=POST \
              --max-retry-attempts=3 \
              --min-backoff=1m \
              --max-backoff=10m \
              --oidc-service-account-email=cloud-scheduler@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --quiet
          fi

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ‚¨áÔ∏è Set up code
        uses: actions/checkout@v2

      - name: üêç Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.2"
          cache: pip
          cache-dependency-path: setup.py

      - name: üèó Install conductor
        run: pip install .[tests,cloud-run]

      - name: ü§ê Create secret file
        run: |
          mkdir -p secrets/db
          echo "{\"internalsgid\":{},\"opensgid\":{\"host\":\"opensgid.agrc.utah.gov\",\"database\":\"opensgid\",\"user\":\"agrc\",\"password\":\"agrc\"},\"github_token\":\"\"}" > secrets/db/connections

      - name: üß™ Run pytest
        run: pytest

      - name: üóùÔ∏è Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.6.0
        with:
          create_credentials_file: true
          token_format: access_token
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

      - name: üê≥ Setup docker
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set short commit hash
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: üì¶ Build image
        run: |-
          docker build \
            --tag gcr.io/${{ secrets.PROJECT_ID }}/conductor:$SHORT_SHA \
            --tag gcr.io/${{ secrets.PROJECT_ID }}/conductor:latest \
            .

      - name: üì§ Publish image
        run: |-
          docker push --all-tags gcr.io/${{ secrets.PROJECT_ID }}/conductor

      - name: üöÄ Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.8.0
        with:
          service: conductor
          image: gcr.io/${{ secrets.PROJECT_ID }}/conductor
          region: us-central1
          secrets: |
            /secrets/db/connection=conductor-connections:latest
            /secrets/sheets/service-account=stewardship-sa:latest
          flags: |
            --service-account=${{secrets.CLOUD_RUN_SERVICE_ACCOUNT_NAME}}
            --vpc-connector=${{ secrets.VPC }}
            --max-instances=10
            --cpu=1000m
            --memory=512Mi
            --timeout=5m

      - name: üï∞Ô∏è Create cloud scheduler
        run: |
          if [ ! "$(gcloud scheduler jobs list | grep conductor)" ]; then
            gcloud scheduler jobs create http conductor \
              --description="Trigger the conductor bot once a week on monday morning" \
              --schedule="0 9 * * 1" \
              --time-zone=America/Denver \
              --uri=$(gcloud run services describe conductor --region us-central1 --format 'value(status.url)')/gcp/schedule \
              --http-method=POST \
              --message-body="{\"now\":true}" \
              --max-retry-attempts=3 \
              --min-backoff=1m \
              --max-backoff=10m \
              --oidc-service-account-email=cloud-scheduler@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --quiet
          else
            gcloud scheduler jobs update http conductor \
              --description="Trigger the conductor bot once a week on monday morning" \
              --schedule="0 9 * * 1" \
              --time-zone=America/Denver \
              --uri=$(gcloud run services describe conductor --region us-central1 --format 'value(status.url)') \
              --http-method=POST \
              --message-body="{\"now\":true}" \
              --max-retry-attempts=3 \
              --min-backoff=1m \
              --max-backoff=10m \
              --oidc-service-account-email=cloud-scheduler@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --quiet
          fi
